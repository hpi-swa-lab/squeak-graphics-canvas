function helpers
generate: extension types: typeList functions: list
	"Take a list of strings comprising open gl functions, and compile FFI functions here.
	See also parseEXTFunctions:do:."
	
	| typeMap signature1 signature2 body |
	(extension beginsWith: 'GL_')
		ifFalse: [^self error: 'suspicious extension name'].

	typeMap := Dictionary new.
	typeList pairsDo: [:string :exttype | typeMap at: string put: exttype].

	self parseEXTFunctions: list do: [:return :function :args |
		signature1 := String streamContents: [:s |
			s nextPutAll: function; nextPut: $(.
			args do: [:arg | s nextPutAll: arg second]
				separatedBy: [s nextPutAll: ', '].
			s nextPut: $)].
		signature2 := String streamContents: [:s |
			s nextPutAll: function.
			args isEmpty ifFalse: [
				s nextPutAll: ': '.
				args do: [:arg | s nextPutAll: arg second]
					separatedBy: [s nextPutAll: ' with: ']]].
		body := String streamContents: [:s |
			s crtab; nextPutAll: '"This method was generated by ', name, '"'.
			s crtab; nextPutAll: '<apicall: '.
			s nextPutAll: (self mapType: return using: typeMap); space.
			s print: function; space.
			s nextPutAll: '('.
			args do: [:arg | s nextPutAll: (self mapType: arg first using: typeMap)]
				separatedBy: [s space].
			s nextPutAll: ')>'; crtab.
			s nextPutAll: '^self externalCallFailed'.
		].
		self class "!" 
			compile: signature1,body classified: extension;
			compile: signature2,body classified: extension]